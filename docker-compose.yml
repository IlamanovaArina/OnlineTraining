services:
  web:
    build: .
    command: sh -c "python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    environment:
      - DEBUG=True
      - HOST=db
    volumes:
      - .:/app
      - static_volume:/media
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:17
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env

  worker:
    build: .
    command: celery -A config worker -l INFO
    depends_on:
      - web
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0

  beat:
    build: .
    command: celery -A config beat -l INFO -S django
    depends_on:
      - web
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    volumes:
#      Монтируем конфигурационный файл nginx и том со статическими файлами
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - ./html:/usr/share/nginx/html
    depends_on:
      - web

networks:
  default:

volumes:
#  Объявляем тома для сохранения данных между перезапусками
  postgres_data:
  static_volume:
  redis_data:
