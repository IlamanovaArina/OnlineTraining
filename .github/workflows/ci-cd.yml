name: Django CI CD

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: flake8 .

#  test:
#    needs: lint
#    runs-on: ubuntu-latest
#
#    steps:
##      - name: Set environment variables for testing
###        env:
###          TESTING: '1'
##        run: echo "TESTING=1" >> $GITHUB_ENV
#
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12'
#
##      - name: Cache pip
##        uses: actions/cache@v3
##        with:
##          path: ~/.cache/pip
##          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
##          restore-keys: |
##            ${{ runner.os }}-pip-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      - name: Run migrations
#        run: python manage.py migrate
##          python manage.py makemigrations
##          python manage.py migrate
#
#      - name: Run tests
#        env:
#          SECRET_KEY: ${{ secrets.SECRET_KEY }}
#          TESTING: '1'
#        run: python manage.py test

  test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables for testing
        env:
          TESTING: '1'
        run: echo "TESTING=1" >> $GITHUB_ENV

      - name: Run migrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TESTING: '1'
        run: python manage.py migrate

      - name: Run tests
        env:
          STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
        run: python manage.py test --noinput

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          touch .env
          echo '"${{ secrets.SECRET_KEY }}"' | sed "s/\"//g" > .env

      - name: Login in Docker hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest .
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:latest nginx/.

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:latest

  copy_files_in_server:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          touch .env
          echo '"${{ secrets.ENV_FILE }}"' | sed "s/\"//g" > .env  # Удаление кавычек в файле. P.S. их не должно быть в секретах

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_PRIVATE }}

      - name: Copy file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY_PRIVATE }}
          source: "docker-compose.yml,.env"
          target: ${{ secrets.DEPLOY_DIR }}

  run_server:
    needs: [ build, copy_files_in_server ]
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run Server
        run: |
          ssh -o StrictHostKeyChecking=no -vT ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            sudo docker compose down
            sudo docker container rm $(docker ps -a -q)
            sudo docker compose up -d --build
          EOF
